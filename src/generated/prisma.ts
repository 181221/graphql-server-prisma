// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { User, Movie, Configuration } from "./prisma-client";
import {
  PrivateConfiguration,
  AuthPayload
} from "../resolvers/types/AuthPayload";
import { Context } from "../resolvers/types/Context";

export type Role = "ADMIN" | "CUSTOMER";
export type MovieOrderByInput = "createdAt_ASC" | "createdAt_DESC";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUser {
    email: string;
  }

  export interface ArgsMovies {
    orderBy?: MovieOrderByInput | null;
    first?: number | null;
  }

  export interface ArgsMovie {
    id?: string | null;
  }

  export interface ArgsConfiguration {
    id?: string | null;
  }

  export interface ArgsConfigurationPrivate {
    id?: string | null;
  }

  export type UsersResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<User | null> | null | Promise<Array<User | null> | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<User | null> | null | Promise<Array<User | null> | null>;
      };

  export type UserResolver =
    | ((
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type MoviesResolver =
    | ((
        parent: undefined,
        args: ArgsMovies,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Movie[] | null | Promise<Movie[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsMovies,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie[] | null | Promise<Movie[] | null>;
      };

  export type MovieResolver =
    | ((
        parent: undefined,
        args: ArgsMovie,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Movie | null | Promise<Movie | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsMovie,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie | null | Promise<Movie | null>;
      };

  export type ConfigurationResolver =
    | ((
        parent: undefined,
        args: ArgsConfiguration,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Configuration | null | Promise<Configuration | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsConfiguration,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Configuration | null | Promise<Configuration | null>;
      };

  export type ConfigurationPrivateResolver =
    | ((
        parent: undefined,
        args: ArgsConfigurationPrivate,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsConfigurationPrivate,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>;
      };

  export interface Type {
    users:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<User | null> | null | Promise<Array<User | null> | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<User | null> | null | Promise<Array<User | null> | null>;
        };

    user:
      | ((
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    movies:
      | ((
          parent: undefined,
          args: ArgsMovies,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie[] | null | Promise<Movie[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsMovies,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Movie[] | null | Promise<Movie[] | null>;
        };

    movie:
      | ((
          parent: undefined,
          args: ArgsMovie,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie | null | Promise<Movie | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsMovie,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Movie | null | Promise<Movie | null>;
        };

    configuration:
      | ((
          parent: undefined,
          args: ArgsConfiguration,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Configuration | null | Promise<Configuration | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsConfiguration,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Configuration | null | Promise<Configuration | null>;
        };

    configurationPrivate:
      | ((
          parent: undefined,
          args: ArgsConfigurationPrivate,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsConfigurationPrivate,
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | PrivateConfiguration
            | null
            | Promise<PrivateConfiguration | null>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => (parent.name === undefined ? null : parent.name),
    email: (parent: User) => parent.email,
    notification: (parent: User) =>
      parent.notification === undefined ? null : parent.notification,
    subscription: (parent: User) =>
      parent.subscription === undefined ? null : parent.subscription,
    role: (parent: User) => (parent.role === undefined ? null : parent.role)
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MoviesResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Movie[] | Promise<Movie[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie[] | Promise<Movie[]>;
      };

  export type NotificationResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type SubscriptionResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type RoleResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Role | null | Promise<Role | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Role | null | Promise<Role | null>;
      };

  export type ConfigurationResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Configuration | null | Promise<Configuration | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Configuration | null | Promise<Configuration | null>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    movies:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie[] | Promise<Movie[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Movie[] | Promise<Movie[]>;
        };

    notification:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    subscription:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    role:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Role | null | Promise<Role | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Role | null | Promise<Role | null>;
        };

    configuration:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Configuration | null | Promise<Configuration | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Configuration | null | Promise<Configuration | null>;
        };
  }
}

export namespace MovieResolvers {
  export const defaultResolvers = {
    id: (parent: Movie) => parent.id,
    createdAt: (parent: Movie) => parent.createdAt,
    title: (parent: Movie) => parent.title,
    requestedById: (parent: Movie) =>
      parent.requestedById === undefined ? null : parent.requestedById,
    img: (parent: Movie) => (parent.img === undefined ? null : parent.img),
    tmdb_id: (parent: Movie) => parent.tmdb_id,
    genres: (parent: Movie) => parent.genres,
    release_date: (parent: Movie) =>
      parent.release_date === undefined ? null : parent.release_date,
    vote_average: (parent: Movie) =>
      parent.vote_average === undefined ? null : parent.vote_average,
    overview: (parent: Movie) =>
      parent.overview === undefined ? null : parent.overview,
    downloaded: (parent: Movie) =>
      parent.downloaded === undefined ? null : parent.downloaded
  };

  export type IdResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type RequestedByResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type RequestedByIdResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type ImgResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type Tmdb_idResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type GenresResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<string | null> | null | Promise<Array<string | null> | null>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<string | null> | null | Promise<Array<string | null> | null>;
      };

  export type Release_dateResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type Vote_averageResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type OverviewResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type DownloadedResolver =
    | ((
        parent: Movie,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    requestedBy:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    requestedById:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    img:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    tmdb_id:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    genres:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<string | null> | null | Promise<Array<string | null> | null>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | Array<string | null>
            | null
            | Promise<Array<string | null> | null>;
        };

    release_date:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    createdAt:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    vote_average:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    overview:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    downloaded:
      | ((
          parent: Movie,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: Movie,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };
  }
}

export namespace ConfigurationResolvers {
  export const defaultResolvers = {
    id: (parent: Configuration) => parent.id,
    radarrApiKey: (parent: Configuration) =>
      parent.radarrApiKey === undefined ? null : parent.radarrApiKey,
    radarrEndpoint: (parent: Configuration) =>
      parent.radarrEndpoint === undefined ? null : parent.radarrEndpoint,
    radarrRootFolder: (parent: Configuration) =>
      parent.radarrRootFolder === undefined ? null : parent.radarrRootFolder
  };

  export type IdResolver =
    | ((
        parent: Configuration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type RadarrApiKeyResolver =
    | ((
        parent: Configuration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type RadarrEndpointResolver =
    | ((
        parent: Configuration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type RadarrRootFolderResolver =
    | ((
        parent: Configuration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type UserResolver =
    | ((
        parent: Configuration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Configuration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    radarrApiKey:
      | ((
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Configuration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    radarrEndpoint:
      | ((
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Configuration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    radarrRootFolder:
      | ((
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Configuration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    user:
      | ((
          parent: Configuration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: Configuration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };
  }
}

export namespace PrivateConfigurationResolvers {
  export const defaultResolvers = {
    id: (parent: PrivateConfiguration) => parent.id,
    radarrApiKey: (parent: PrivateConfiguration) => parent.radarrApiKey,
    radarrEndpoint: (parent: PrivateConfiguration) => parent.radarrEndpoint,
    radarrRootFolder: (parent: PrivateConfiguration) => parent.radarrRootFolder,
    pushoverApiKey: (parent: PrivateConfiguration) =>
      parent.pushoverApiKey === undefined ? null : parent.pushoverApiKey,
    pushoverUserKey: (parent: PrivateConfiguration) =>
      parent.pushoverUserKey === undefined ? null : parent.pushoverUserKey
  };

  export type IdResolver =
    | ((
        parent: PrivateConfiguration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type RadarrApiKeyResolver =
    | ((
        parent: PrivateConfiguration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type RadarrEndpointResolver =
    | ((
        parent: PrivateConfiguration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type RadarrRootFolderResolver =
    | ((
        parent: PrivateConfiguration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PushoverEndpointResolver =
    | ((
        parent: PrivateConfiguration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PushoverApiKeyResolver =
    | ((
        parent: PrivateConfiguration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PushoverUserKeyResolver =
    | ((
        parent: PrivateConfiguration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type UserResolver =
    | ((
        parent: PrivateConfiguration,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export interface Type {
    id:
      | ((
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PrivateConfiguration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    radarrApiKey:
      | ((
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PrivateConfiguration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    radarrEndpoint:
      | ((
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PrivateConfiguration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    radarrRootFolder:
      | ((
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PrivateConfiguration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    pushoverEndpoint:
      | ((
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PrivateConfiguration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    pushoverApiKey:
      | ((
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PrivateConfiguration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    pushoverUserKey:
      | ((
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PrivateConfiguration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    user:
      | ((
          parent: PrivateConfiguration,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: PrivateConfiguration,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateConfiguration {
    radarrApiKey: string;
    radarrEndpoint: string;
    radarrRootFolder: string;
    pushoverEndpoint?: string | null;
    pushoverApiKey?: string | null;
    pushoverUserKey?: string | null;
  }

  export interface ArgsUpdateConfiguration {
    radarrApiKey?: string | null;
    radarrEndpoint?: string | null;
    radarrRootFolder?: string | null;
    pushoverEndpoint?: string | null;
    pushoverApiKey?: string | null;
    pushoverUserKey?: string | null;
  }

  export interface ArgsCreateToken {
    email: string;
  }

  export interface ArgsGetToken {
    email: string;
  }

  export interface ArgsUpdateUser {
    email: string;
    subscription?: string | null;
    name?: string | null;
    notification?: boolean | null;
    role?: Role | null;
  }

  export interface ArgsCreateMovie {
    title: string;
    img?: string | null;
    tmdb_id: string;
    genres?: Array<string | null> | null;
    vote_average?: string | null;
    release_date?: string | null;
    overview?: string | null;
  }

  export interface ArgsUpdateMovie {
    tmdb_id: string;
    downloaded?: boolean | null;
  }

  export interface ArgsDeleteMovie {
    id: string;
  }

  export type CreateConfigurationResolver =
    | ((
        parent: undefined,
        args: ArgsCreateConfiguration,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateConfiguration,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>;
      };

  export type UpdateConfigurationResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateConfiguration,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateConfiguration,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>;
      };

  export type CreateTokenResolver =
    | ((
        parent: undefined,
        args: ArgsCreateToken,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | null | Promise<AuthPayload | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateToken,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | null | Promise<AuthPayload | null>;
      };

  export type GetTokenResolver =
    | ((
        parent: undefined,
        args: ArgsGetToken,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | null | Promise<AuthPayload | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsGetToken,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | null | Promise<AuthPayload | null>;
      };

  export type UpdateUserResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type CreateMovieResolver =
    | ((
        parent: undefined,
        args: ArgsCreateMovie,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Movie | null | Promise<Movie | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateMovie,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie | null | Promise<Movie | null>;
      };

  export type UpdateMovieResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateMovie,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Movie | null | Promise<Movie | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateMovie,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie | null | Promise<Movie | null>;
      };

  export type DeleteMovieResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteMovie,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Movie | null | Promise<Movie | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteMovie,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie | null | Promise<Movie | null>;
      };

  export interface Type {
    createConfiguration:
      | ((
          parent: undefined,
          args: ArgsCreateConfiguration,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateConfiguration,
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | PrivateConfiguration
            | null
            | Promise<PrivateConfiguration | null>;
        };

    updateConfiguration:
      | ((
          parent: undefined,
          args: ArgsUpdateConfiguration,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PrivateConfiguration | null | Promise<PrivateConfiguration | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateConfiguration,
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | PrivateConfiguration
            | null
            | Promise<PrivateConfiguration | null>;
        };

    createToken:
      | ((
          parent: undefined,
          args: ArgsCreateToken,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | null | Promise<AuthPayload | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateToken,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | null | Promise<AuthPayload | null>;
        };

    getToken:
      | ((
          parent: undefined,
          args: ArgsGetToken,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | null | Promise<AuthPayload | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsGetToken,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | null | Promise<AuthPayload | null>;
        };

    updateUser:
      | ((
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    createMovie:
      | ((
          parent: undefined,
          args: ArgsCreateMovie,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie | null | Promise<Movie | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateMovie,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Movie | null | Promise<Movie | null>;
        };

    updateMovie:
      | ((
          parent: undefined,
          args: ArgsUpdateMovie,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie | null | Promise<Movie | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateMovie,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Movie | null | Promise<Movie | null>;
        };

    deleteMovie:
      | ((
          parent: undefined,
          args: ArgsDeleteMovie,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Movie | null | Promise<Movie | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteMovie,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Movie | null | Promise<Movie | null>;
        };
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) =>
      parent.token === undefined ? null : parent.token
  };

  export type TokenResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type UserResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type AdminTokenResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export interface Type {
    token:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    user:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    adminToken:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export type NewMovieResolver = {
    subscribe: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AsyncIterator<Movie | null> | Promise<AsyncIterator<Movie | null>>;
    resolve?: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Movie | null | Promise<Movie | null>;
  };

  export interface Type {
    newMovie: {
      subscribe: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AsyncIterator<Movie | null> | Promise<AsyncIterator<Movie | null>>;
      resolve?: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Movie | null | Promise<Movie | null>;
    };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Movie: MovieResolvers.Type;
  Configuration: ConfigurationResolvers.Type;
  PrivateConfiguration: PrivateConfigurationResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
