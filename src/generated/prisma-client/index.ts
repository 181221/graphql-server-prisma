// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import { makePrismaClientClass, BaseClientOptions, Model } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  configuration: (where?: ConfigurationWhereInput) => Promise<boolean>;
  movie: (where?: MovieWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(query: string, variables?: { [key: string]: any }) => Promise<T>;

  /**
   * Queries
   */

  configuration: (where: ConfigurationWhereUniqueInput) => ConfigurationNullablePromise;
  configurations: (args?: {
    where?: ConfigurationWhereInput;
    orderBy?: ConfigurationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Configuration>;
  configurationsConnection: (args?: {
    where?: ConfigurationWhereInput;
    orderBy?: ConfigurationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConfigurationConnectionPromise;
  movie: (where: MovieWhereUniqueInput) => MovieNullablePromise;
  movies: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Movie>;
  moviesConnection: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MovieConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConfiguration: (data: ConfigurationCreateInput) => ConfigurationPromise;
  updateConfiguration: (args: {
    data: ConfigurationUpdateInput;
    where: ConfigurationWhereUniqueInput;
  }) => ConfigurationPromise;
  updateManyConfigurations: (args: {
    data: ConfigurationUpdateManyMutationInput;
    where?: ConfigurationWhereInput;
  }) => BatchPayloadPromise;
  upsertConfiguration: (args: {
    where: ConfigurationWhereUniqueInput;
    create: ConfigurationCreateInput;
    update: ConfigurationUpdateInput;
  }) => ConfigurationPromise;
  deleteConfiguration: (where: ConfigurationWhereUniqueInput) => ConfigurationPromise;
  deleteManyConfigurations: (where?: ConfigurationWhereInput) => BatchPayloadPromise;
  createMovie: (data: MovieCreateInput) => MoviePromise;
  updateMovie: (args: { data: MovieUpdateInput; where: MovieWhereUniqueInput }) => MoviePromise;
  updateManyMovies: (args: {
    data: MovieUpdateManyMutationInput;
    where?: MovieWhereInput;
  }) => BatchPayloadPromise;
  upsertMovie: (args: {
    where: MovieWhereUniqueInput;
    create: MovieCreateInput;
    update: MovieUpdateInput;
  }) => MoviePromise;
  deleteMovie: (where: MovieWhereUniqueInput) => MoviePromise;
  deleteManyMovies: (where?: MovieWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: { data: UserUpdateInput; where: UserWhereUniqueInput }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  configuration: (
    where?: ConfigurationSubscriptionWhereInput,
  ) => ConfigurationSubscriptionPayloadSubscription;
  movie: (where?: MovieSubscriptionWhereInput) => MovieSubscriptionPayloadSubscription;
  user: (where?: UserSubscriptionWhereInput) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "CUSTOMER";

export type MovieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "requestedById_ASC"
  | "requestedById_DESC"
  | "img_ASC"
  | "img_DESC"
  | "tmdbId_ASC"
  | "tmdbId_DESC"
  | "release_date_ASC"
  | "release_date_DESC"
  | "vote_average_ASC"
  | "vote_average_DESC"
  | "overview_ASC"
  | "overview_DESC"
  | "downloaded_ASC"
  | "downloaded_DESC";

export type ConfigurationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "radarrApiKey_ASC"
  | "radarrApiKey_DESC"
  | "radarrEndpoint_ASC"
  | "radarrEndpoint_DESC"
  | "radarrRootFolder_ASC"
  | "radarrRootFolder_DESC"
  | "pushoverEndpoint_ASC"
  | "pushoverEndpoint_DESC"
  | "pushoverApiKey_ASC"
  | "pushoverApiKey_DESC"
  | "pushoverUserKey_ASC"
  | "pushoverUserKey_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "notification_ASC"
  | "notification_DESC"
  | "subscription_ASC"
  | "subscription_DESC"
  | "role_ASC"
  | "role_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ConfigurationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MovieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  requestedBy?: Maybe<UserWhereInput>;
  requestedById?: Maybe<String>;
  requestedById_not?: Maybe<String>;
  requestedById_in?: Maybe<String[] | String>;
  requestedById_not_in?: Maybe<String[] | String>;
  requestedById_lt?: Maybe<String>;
  requestedById_lte?: Maybe<String>;
  requestedById_gt?: Maybe<String>;
  requestedById_gte?: Maybe<String>;
  requestedById_contains?: Maybe<String>;
  requestedById_not_contains?: Maybe<String>;
  requestedById_starts_with?: Maybe<String>;
  requestedById_not_starts_with?: Maybe<String>;
  requestedById_ends_with?: Maybe<String>;
  requestedById_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  tmdbId?: Maybe<Int>;
  tmdbId_not?: Maybe<Int>;
  tmdbId_in?: Maybe<Int[] | Int>;
  tmdbId_not_in?: Maybe<Int[] | Int>;
  tmdbId_lt?: Maybe<Int>;
  tmdbId_lte?: Maybe<Int>;
  tmdbId_gt?: Maybe<Int>;
  tmdbId_gte?: Maybe<Int>;
  release_date?: Maybe<String>;
  release_date_not?: Maybe<String>;
  release_date_in?: Maybe<String[] | String>;
  release_date_not_in?: Maybe<String[] | String>;
  release_date_lt?: Maybe<String>;
  release_date_lte?: Maybe<String>;
  release_date_gt?: Maybe<String>;
  release_date_gte?: Maybe<String>;
  release_date_contains?: Maybe<String>;
  release_date_not_contains?: Maybe<String>;
  release_date_starts_with?: Maybe<String>;
  release_date_not_starts_with?: Maybe<String>;
  release_date_ends_with?: Maybe<String>;
  release_date_not_ends_with?: Maybe<String>;
  vote_average?: Maybe<Float>;
  vote_average_not?: Maybe<Float>;
  vote_average_in?: Maybe<Float[] | Float>;
  vote_average_not_in?: Maybe<Float[] | Float>;
  vote_average_lt?: Maybe<Float>;
  vote_average_lte?: Maybe<Float>;
  vote_average_gt?: Maybe<Float>;
  vote_average_gte?: Maybe<Float>;
  overview?: Maybe<String>;
  overview_not?: Maybe<String>;
  overview_in?: Maybe<String[] | String>;
  overview_not_in?: Maybe<String[] | String>;
  overview_lt?: Maybe<String>;
  overview_lte?: Maybe<String>;
  overview_gt?: Maybe<String>;
  overview_gte?: Maybe<String>;
  overview_contains?: Maybe<String>;
  overview_not_contains?: Maybe<String>;
  overview_starts_with?: Maybe<String>;
  overview_not_starts_with?: Maybe<String>;
  overview_ends_with?: Maybe<String>;
  overview_not_ends_with?: Maybe<String>;
  downloaded?: Maybe<Boolean>;
  downloaded_not?: Maybe<Boolean>;
  AND?: Maybe<MovieWhereInput[] | MovieWhereInput>;
  OR?: Maybe<MovieWhereInput[] | MovieWhereInput>;
  NOT?: Maybe<MovieWhereInput[] | MovieWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  movies_every?: Maybe<MovieWhereInput>;
  movies_some?: Maybe<MovieWhereInput>;
  movies_none?: Maybe<MovieWhereInput>;
  notification?: Maybe<Boolean>;
  notification_not?: Maybe<Boolean>;
  subscription?: Maybe<String>;
  subscription_not?: Maybe<String>;
  subscription_in?: Maybe<String[] | String>;
  subscription_not_in?: Maybe<String[] | String>;
  subscription_lt?: Maybe<String>;
  subscription_lte?: Maybe<String>;
  subscription_gt?: Maybe<String>;
  subscription_gte?: Maybe<String>;
  subscription_contains?: Maybe<String>;
  subscription_not_contains?: Maybe<String>;
  subscription_starts_with?: Maybe<String>;
  subscription_not_starts_with?: Maybe<String>;
  subscription_ends_with?: Maybe<String>;
  subscription_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  configuration?: Maybe<ConfigurationWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ConfigurationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  radarrApiKey?: Maybe<String>;
  radarrApiKey_not?: Maybe<String>;
  radarrApiKey_in?: Maybe<String[] | String>;
  radarrApiKey_not_in?: Maybe<String[] | String>;
  radarrApiKey_lt?: Maybe<String>;
  radarrApiKey_lte?: Maybe<String>;
  radarrApiKey_gt?: Maybe<String>;
  radarrApiKey_gte?: Maybe<String>;
  radarrApiKey_contains?: Maybe<String>;
  radarrApiKey_not_contains?: Maybe<String>;
  radarrApiKey_starts_with?: Maybe<String>;
  radarrApiKey_not_starts_with?: Maybe<String>;
  radarrApiKey_ends_with?: Maybe<String>;
  radarrApiKey_not_ends_with?: Maybe<String>;
  radarrEndpoint?: Maybe<String>;
  radarrEndpoint_not?: Maybe<String>;
  radarrEndpoint_in?: Maybe<String[] | String>;
  radarrEndpoint_not_in?: Maybe<String[] | String>;
  radarrEndpoint_lt?: Maybe<String>;
  radarrEndpoint_lte?: Maybe<String>;
  radarrEndpoint_gt?: Maybe<String>;
  radarrEndpoint_gte?: Maybe<String>;
  radarrEndpoint_contains?: Maybe<String>;
  radarrEndpoint_not_contains?: Maybe<String>;
  radarrEndpoint_starts_with?: Maybe<String>;
  radarrEndpoint_not_starts_with?: Maybe<String>;
  radarrEndpoint_ends_with?: Maybe<String>;
  radarrEndpoint_not_ends_with?: Maybe<String>;
  radarrRootFolder?: Maybe<String>;
  radarrRootFolder_not?: Maybe<String>;
  radarrRootFolder_in?: Maybe<String[] | String>;
  radarrRootFolder_not_in?: Maybe<String[] | String>;
  radarrRootFolder_lt?: Maybe<String>;
  radarrRootFolder_lte?: Maybe<String>;
  radarrRootFolder_gt?: Maybe<String>;
  radarrRootFolder_gte?: Maybe<String>;
  radarrRootFolder_contains?: Maybe<String>;
  radarrRootFolder_not_contains?: Maybe<String>;
  radarrRootFolder_starts_with?: Maybe<String>;
  radarrRootFolder_not_starts_with?: Maybe<String>;
  radarrRootFolder_ends_with?: Maybe<String>;
  radarrRootFolder_not_ends_with?: Maybe<String>;
  pushoverEndpoint?: Maybe<String>;
  pushoverEndpoint_not?: Maybe<String>;
  pushoverEndpoint_in?: Maybe<String[] | String>;
  pushoverEndpoint_not_in?: Maybe<String[] | String>;
  pushoverEndpoint_lt?: Maybe<String>;
  pushoverEndpoint_lte?: Maybe<String>;
  pushoverEndpoint_gt?: Maybe<String>;
  pushoverEndpoint_gte?: Maybe<String>;
  pushoverEndpoint_contains?: Maybe<String>;
  pushoverEndpoint_not_contains?: Maybe<String>;
  pushoverEndpoint_starts_with?: Maybe<String>;
  pushoverEndpoint_not_starts_with?: Maybe<String>;
  pushoverEndpoint_ends_with?: Maybe<String>;
  pushoverEndpoint_not_ends_with?: Maybe<String>;
  pushoverApiKey?: Maybe<String>;
  pushoverApiKey_not?: Maybe<String>;
  pushoverApiKey_in?: Maybe<String[] | String>;
  pushoverApiKey_not_in?: Maybe<String[] | String>;
  pushoverApiKey_lt?: Maybe<String>;
  pushoverApiKey_lte?: Maybe<String>;
  pushoverApiKey_gt?: Maybe<String>;
  pushoverApiKey_gte?: Maybe<String>;
  pushoverApiKey_contains?: Maybe<String>;
  pushoverApiKey_not_contains?: Maybe<String>;
  pushoverApiKey_starts_with?: Maybe<String>;
  pushoverApiKey_not_starts_with?: Maybe<String>;
  pushoverApiKey_ends_with?: Maybe<String>;
  pushoverApiKey_not_ends_with?: Maybe<String>;
  pushoverUserKey?: Maybe<String>;
  pushoverUserKey_not?: Maybe<String>;
  pushoverUserKey_in?: Maybe<String[] | String>;
  pushoverUserKey_not_in?: Maybe<String[] | String>;
  pushoverUserKey_lt?: Maybe<String>;
  pushoverUserKey_lte?: Maybe<String>;
  pushoverUserKey_gt?: Maybe<String>;
  pushoverUserKey_gte?: Maybe<String>;
  pushoverUserKey_contains?: Maybe<String>;
  pushoverUserKey_not_contains?: Maybe<String>;
  pushoverUserKey_starts_with?: Maybe<String>;
  pushoverUserKey_not_starts_with?: Maybe<String>;
  pushoverUserKey_ends_with?: Maybe<String>;
  pushoverUserKey_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<ConfigurationWhereInput[] | ConfigurationWhereInput>;
  OR?: Maybe<ConfigurationWhereInput[] | ConfigurationWhereInput>;
  NOT?: Maybe<ConfigurationWhereInput[] | ConfigurationWhereInput>;
}

export type MovieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  tmdbId?: Maybe<Int>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  subscription?: Maybe<String>;
}>;

export interface ConfigurationCreateInput {
  id?: Maybe<ID_Input>;
  radarrApiKey?: Maybe<String>;
  radarrEndpoint?: Maybe<String>;
  radarrRootFolder?: Maybe<String>;
  pushoverEndpoint?: Maybe<String>;
  pushoverApiKey?: Maybe<String>;
  pushoverUserKey?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutConfigurationInput>;
}

export interface UserCreateOneWithoutConfigurationInput {
  create?: Maybe<UserCreateWithoutConfigurationInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutConfigurationInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  email: String;
  movies?: Maybe<MovieCreateManyWithoutRequestedByInput>;
  notification?: Maybe<Boolean>;
  subscription?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface MovieCreateManyWithoutRequestedByInput {
  create?: Maybe<MovieCreateWithoutRequestedByInput[] | MovieCreateWithoutRequestedByInput>;
  connect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
}

export interface MovieCreateWithoutRequestedByInput {
  id?: Maybe<ID_Input>;
  title: String;
  requestedById?: Maybe<String>;
  img?: Maybe<String>;
  tmdbId: Int;
  genres?: Maybe<MovieCreategenresInput>;
  release_date?: Maybe<String>;
  vote_average?: Maybe<Float>;
  overview?: Maybe<String>;
  downloaded?: Maybe<Boolean>;
}

export interface MovieCreategenresInput {
  set?: Maybe<Int[] | Int>;
}

export interface ConfigurationUpdateInput {
  radarrApiKey?: Maybe<String>;
  radarrEndpoint?: Maybe<String>;
  radarrRootFolder?: Maybe<String>;
  pushoverEndpoint?: Maybe<String>;
  pushoverApiKey?: Maybe<String>;
  pushoverUserKey?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutConfigurationInput>;
}

export interface UserUpdateOneWithoutConfigurationInput {
  create?: Maybe<UserCreateWithoutConfigurationInput>;
  update?: Maybe<UserUpdateWithoutConfigurationDataInput>;
  upsert?: Maybe<UserUpsertWithoutConfigurationInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutConfigurationDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  movies?: Maybe<MovieUpdateManyWithoutRequestedByInput>;
  notification?: Maybe<Boolean>;
  subscription?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface MovieUpdateManyWithoutRequestedByInput {
  create?: Maybe<MovieCreateWithoutRequestedByInput[] | MovieCreateWithoutRequestedByInput>;
  delete?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  connect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  set?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  disconnect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  update?: Maybe<
    | MovieUpdateWithWhereUniqueWithoutRequestedByInput[]
    | MovieUpdateWithWhereUniqueWithoutRequestedByInput
  >;
  upsert?: Maybe<
    | MovieUpsertWithWhereUniqueWithoutRequestedByInput[]
    | MovieUpsertWithWhereUniqueWithoutRequestedByInput
  >;
  deleteMany?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  updateMany?: Maybe<MovieUpdateManyWithWhereNestedInput[] | MovieUpdateManyWithWhereNestedInput>;
}

export interface MovieUpdateWithWhereUniqueWithoutRequestedByInput {
  where: MovieWhereUniqueInput;
  data: MovieUpdateWithoutRequestedByDataInput;
}

export interface MovieUpdateWithoutRequestedByDataInput {
  title?: Maybe<String>;
  requestedById?: Maybe<String>;
  img?: Maybe<String>;
  tmdbId?: Maybe<Int>;
  genres?: Maybe<MovieUpdategenresInput>;
  release_date?: Maybe<String>;
  vote_average?: Maybe<Float>;
  overview?: Maybe<String>;
  downloaded?: Maybe<Boolean>;
}

export interface MovieUpdategenresInput {
  set?: Maybe<Int[] | Int>;
}

export interface MovieUpsertWithWhereUniqueWithoutRequestedByInput {
  where: MovieWhereUniqueInput;
  update: MovieUpdateWithoutRequestedByDataInput;
  create: MovieCreateWithoutRequestedByInput;
}

export interface MovieScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  requestedById?: Maybe<String>;
  requestedById_not?: Maybe<String>;
  requestedById_in?: Maybe<String[] | String>;
  requestedById_not_in?: Maybe<String[] | String>;
  requestedById_lt?: Maybe<String>;
  requestedById_lte?: Maybe<String>;
  requestedById_gt?: Maybe<String>;
  requestedById_gte?: Maybe<String>;
  requestedById_contains?: Maybe<String>;
  requestedById_not_contains?: Maybe<String>;
  requestedById_starts_with?: Maybe<String>;
  requestedById_not_starts_with?: Maybe<String>;
  requestedById_ends_with?: Maybe<String>;
  requestedById_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  tmdbId?: Maybe<Int>;
  tmdbId_not?: Maybe<Int>;
  tmdbId_in?: Maybe<Int[] | Int>;
  tmdbId_not_in?: Maybe<Int[] | Int>;
  tmdbId_lt?: Maybe<Int>;
  tmdbId_lte?: Maybe<Int>;
  tmdbId_gt?: Maybe<Int>;
  tmdbId_gte?: Maybe<Int>;
  release_date?: Maybe<String>;
  release_date_not?: Maybe<String>;
  release_date_in?: Maybe<String[] | String>;
  release_date_not_in?: Maybe<String[] | String>;
  release_date_lt?: Maybe<String>;
  release_date_lte?: Maybe<String>;
  release_date_gt?: Maybe<String>;
  release_date_gte?: Maybe<String>;
  release_date_contains?: Maybe<String>;
  release_date_not_contains?: Maybe<String>;
  release_date_starts_with?: Maybe<String>;
  release_date_not_starts_with?: Maybe<String>;
  release_date_ends_with?: Maybe<String>;
  release_date_not_ends_with?: Maybe<String>;
  vote_average?: Maybe<Float>;
  vote_average_not?: Maybe<Float>;
  vote_average_in?: Maybe<Float[] | Float>;
  vote_average_not_in?: Maybe<Float[] | Float>;
  vote_average_lt?: Maybe<Float>;
  vote_average_lte?: Maybe<Float>;
  vote_average_gt?: Maybe<Float>;
  vote_average_gte?: Maybe<Float>;
  overview?: Maybe<String>;
  overview_not?: Maybe<String>;
  overview_in?: Maybe<String[] | String>;
  overview_not_in?: Maybe<String[] | String>;
  overview_lt?: Maybe<String>;
  overview_lte?: Maybe<String>;
  overview_gt?: Maybe<String>;
  overview_gte?: Maybe<String>;
  overview_contains?: Maybe<String>;
  overview_not_contains?: Maybe<String>;
  overview_starts_with?: Maybe<String>;
  overview_not_starts_with?: Maybe<String>;
  overview_ends_with?: Maybe<String>;
  overview_not_ends_with?: Maybe<String>;
  downloaded?: Maybe<Boolean>;
  downloaded_not?: Maybe<Boolean>;
  AND?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  OR?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  NOT?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
}

export interface MovieUpdateManyWithWhereNestedInput {
  where: MovieScalarWhereInput;
  data: MovieUpdateManyDataInput;
}

export interface MovieUpdateManyDataInput {
  title?: Maybe<String>;
  requestedById?: Maybe<String>;
  img?: Maybe<String>;
  tmdbId?: Maybe<Int>;
  genres?: Maybe<MovieUpdategenresInput>;
  release_date?: Maybe<String>;
  vote_average?: Maybe<Float>;
  overview?: Maybe<String>;
  downloaded?: Maybe<Boolean>;
}

export interface UserUpsertWithoutConfigurationInput {
  update: UserUpdateWithoutConfigurationDataInput;
  create: UserCreateWithoutConfigurationInput;
}

export interface ConfigurationUpdateManyMutationInput {
  radarrApiKey?: Maybe<String>;
  radarrEndpoint?: Maybe<String>;
  radarrRootFolder?: Maybe<String>;
  pushoverEndpoint?: Maybe<String>;
  pushoverApiKey?: Maybe<String>;
  pushoverUserKey?: Maybe<String>;
}

export interface MovieCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  requestedBy?: Maybe<UserCreateOneWithoutMoviesInput>;
  requestedById?: Maybe<String>;
  img?: Maybe<String>;
  tmdbId: Int;
  genres?: Maybe<MovieCreategenresInput>;
  release_date?: Maybe<String>;
  vote_average?: Maybe<Float>;
  overview?: Maybe<String>;
  downloaded?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutMoviesInput {
  create?: Maybe<UserCreateWithoutMoviesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMoviesInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  email: String;
  notification?: Maybe<Boolean>;
  subscription?: Maybe<String>;
  role?: Maybe<Role>;
  configuration?: Maybe<ConfigurationCreateOneWithoutUserInput>;
}

export interface ConfigurationCreateOneWithoutUserInput {
  create?: Maybe<ConfigurationCreateWithoutUserInput>;
  connect?: Maybe<ConfigurationWhereUniqueInput>;
}

export interface ConfigurationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  radarrApiKey?: Maybe<String>;
  radarrEndpoint?: Maybe<String>;
  radarrRootFolder?: Maybe<String>;
  pushoverEndpoint?: Maybe<String>;
  pushoverApiKey?: Maybe<String>;
  pushoverUserKey?: Maybe<String>;
}

export interface MovieUpdateInput {
  title?: Maybe<String>;
  requestedBy?: Maybe<UserUpdateOneWithoutMoviesInput>;
  requestedById?: Maybe<String>;
  img?: Maybe<String>;
  tmdbId?: Maybe<Int>;
  genres?: Maybe<MovieUpdategenresInput>;
  release_date?: Maybe<String>;
  vote_average?: Maybe<Float>;
  overview?: Maybe<String>;
  downloaded?: Maybe<Boolean>;
}

export interface UserUpdateOneWithoutMoviesInput {
  create?: Maybe<UserCreateWithoutMoviesInput>;
  update?: Maybe<UserUpdateWithoutMoviesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMoviesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMoviesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  notification?: Maybe<Boolean>;
  subscription?: Maybe<String>;
  role?: Maybe<Role>;
  configuration?: Maybe<ConfigurationUpdateOneWithoutUserInput>;
}

export interface ConfigurationUpdateOneWithoutUserInput {
  create?: Maybe<ConfigurationCreateWithoutUserInput>;
  update?: Maybe<ConfigurationUpdateWithoutUserDataInput>;
  upsert?: Maybe<ConfigurationUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ConfigurationWhereUniqueInput>;
}

export interface ConfigurationUpdateWithoutUserDataInput {
  radarrApiKey?: Maybe<String>;
  radarrEndpoint?: Maybe<String>;
  radarrRootFolder?: Maybe<String>;
  pushoverEndpoint?: Maybe<String>;
  pushoverApiKey?: Maybe<String>;
  pushoverUserKey?: Maybe<String>;
}

export interface ConfigurationUpsertWithoutUserInput {
  update: ConfigurationUpdateWithoutUserDataInput;
  create: ConfigurationCreateWithoutUserInput;
}

export interface UserUpsertWithoutMoviesInput {
  update: UserUpdateWithoutMoviesDataInput;
  create: UserCreateWithoutMoviesInput;
}

export interface MovieUpdateManyMutationInput {
  title?: Maybe<String>;
  requestedById?: Maybe<String>;
  img?: Maybe<String>;
  tmdbId?: Maybe<Int>;
  genres?: Maybe<MovieUpdategenresInput>;
  release_date?: Maybe<String>;
  vote_average?: Maybe<Float>;
  overview?: Maybe<String>;
  downloaded?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  email: String;
  movies?: Maybe<MovieCreateManyWithoutRequestedByInput>;
  notification?: Maybe<Boolean>;
  subscription?: Maybe<String>;
  role?: Maybe<Role>;
  configuration?: Maybe<ConfigurationCreateOneWithoutUserInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  movies?: Maybe<MovieUpdateManyWithoutRequestedByInput>;
  notification?: Maybe<Boolean>;
  subscription?: Maybe<String>;
  role?: Maybe<Role>;
  configuration?: Maybe<ConfigurationUpdateOneWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  notification?: Maybe<Boolean>;
  subscription?: Maybe<String>;
  role?: Maybe<Role>;
}

export interface ConfigurationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConfigurationWhereInput>;
  AND?: Maybe<ConfigurationSubscriptionWhereInput[] | ConfigurationSubscriptionWhereInput>;
  OR?: Maybe<ConfigurationSubscriptionWhereInput[] | ConfigurationSubscriptionWhereInput>;
  NOT?: Maybe<ConfigurationSubscriptionWhereInput[] | ConfigurationSubscriptionWhereInput>;
}

export interface MovieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MovieWhereInput>;
  AND?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
  OR?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
  NOT?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Configuration {
  id: ID_Output;
  radarrApiKey?: String;
  radarrEndpoint?: String;
  radarrRootFolder?: String;
  pushoverEndpoint?: String;
  pushoverApiKey?: String;
  pushoverUserKey?: String;
}

export interface ConfigurationPromise extends Promise<Configuration>, Fragmentable {
  id: () => Promise<ID_Output>;
  radarrApiKey: () => Promise<String>;
  radarrEndpoint: () => Promise<String>;
  radarrRootFolder: () => Promise<String>;
  pushoverEndpoint: () => Promise<String>;
  pushoverApiKey: () => Promise<String>;
  pushoverUserKey: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface ConfigurationSubscription
  extends Promise<AsyncIterator<Configuration>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  radarrApiKey: () => Promise<AsyncIterator<String>>;
  radarrEndpoint: () => Promise<AsyncIterator<String>>;
  radarrRootFolder: () => Promise<AsyncIterator<String>>;
  pushoverEndpoint: () => Promise<AsyncIterator<String>>;
  pushoverApiKey: () => Promise<AsyncIterator<String>>;
  pushoverUserKey: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface ConfigurationNullablePromise extends Promise<Configuration | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  radarrApiKey: () => Promise<String>;
  radarrEndpoint: () => Promise<String>;
  radarrRootFolder: () => Promise<String>;
  pushoverEndpoint: () => Promise<String>;
  pushoverApiKey: () => Promise<String>;
  pushoverUserKey: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  name?: String;
  email: String;
  notification?: Boolean;
  subscription?: String;
  role?: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  movies: <T = FragmentableArray<Movie>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notification: () => Promise<Boolean>;
  subscription: () => Promise<String>;
  role: () => Promise<Role>;
  configuration: <T = ConfigurationPromise>() => T;
}

export interface UserSubscription extends Promise<AsyncIterator<User>>, Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  movies: <T = Promise<AsyncIterator<MovieSubscription>>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notification: () => Promise<AsyncIterator<Boolean>>;
  subscription: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  configuration: <T = ConfigurationSubscription>() => T;
}

export interface UserNullablePromise extends Promise<User | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  movies: <T = FragmentableArray<Movie>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notification: () => Promise<Boolean>;
  subscription: () => Promise<String>;
  role: () => Promise<Role>;
  configuration: <T = ConfigurationPromise>() => T;
}

export interface Movie {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
  requestedById?: String;
  img?: String;
  tmdbId: Int;
  genres: Int[];
  release_date?: String;
  vote_average?: Float;
  overview?: String;
  downloaded?: Boolean;
}

export interface MoviePromise extends Promise<Movie>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  requestedBy: <T = UserPromise>() => T;
  requestedById: () => Promise<String>;
  img: () => Promise<String>;
  tmdbId: () => Promise<Int>;
  genres: () => Promise<Int[]>;
  release_date: () => Promise<String>;
  vote_average: () => Promise<Float>;
  overview: () => Promise<String>;
  downloaded: () => Promise<Boolean>;
}

export interface MovieSubscription extends Promise<AsyncIterator<Movie>>, Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  requestedBy: <T = UserSubscription>() => T;
  requestedById: () => Promise<AsyncIterator<String>>;
  img: () => Promise<AsyncIterator<String>>;
  tmdbId: () => Promise<AsyncIterator<Int>>;
  genres: () => Promise<AsyncIterator<Int[]>>;
  release_date: () => Promise<AsyncIterator<String>>;
  vote_average: () => Promise<AsyncIterator<Float>>;
  overview: () => Promise<AsyncIterator<String>>;
  downloaded: () => Promise<AsyncIterator<Boolean>>;
}

export interface MovieNullablePromise extends Promise<Movie | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  requestedBy: <T = UserPromise>() => T;
  requestedById: () => Promise<String>;
  img: () => Promise<String>;
  tmdbId: () => Promise<Int>;
  genres: () => Promise<Int[]>;
  release_date: () => Promise<String>;
  vote_average: () => Promise<Float>;
  overview: () => Promise<String>;
  downloaded: () => Promise<Boolean>;
}

export interface ConfigurationConnection {
  pageInfo: PageInfo;
  edges: ConfigurationEdge[];
}

export interface ConfigurationConnectionPromise
  extends Promise<ConfigurationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConfigurationEdge>>() => T;
  aggregate: <T = AggregateConfigurationPromise>() => T;
}

export interface ConfigurationConnectionSubscription
  extends Promise<AsyncIterator<ConfigurationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConfigurationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConfigurationSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription extends Promise<AsyncIterator<PageInfo>>, Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ConfigurationEdge {
  node: Configuration;
  cursor: String;
}

export interface ConfigurationEdgePromise extends Promise<ConfigurationEdge>, Fragmentable {
  node: <T = ConfigurationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConfigurationEdgeSubscription
  extends Promise<AsyncIterator<ConfigurationEdge>>,
    Fragmentable {
  node: <T = ConfigurationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConfiguration {
  count: Int;
}

export interface AggregateConfigurationPromise
  extends Promise<AggregateConfiguration>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConfigurationSubscription
  extends Promise<AsyncIterator<AggregateConfiguration>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MovieConnection {
  pageInfo: PageInfo;
  edges: MovieEdge[];
}

export interface MovieConnectionPromise extends Promise<MovieConnection>, Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MovieEdge>>() => T;
  aggregate: <T = AggregateMoviePromise>() => T;
}

export interface MovieConnectionSubscription
  extends Promise<AsyncIterator<MovieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MovieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMovieSubscription>() => T;
}

export interface MovieEdge {
  node: Movie;
  cursor: String;
}

export interface MovieEdgePromise extends Promise<MovieEdge>, Fragmentable {
  node: <T = MoviePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MovieEdgeSubscription extends Promise<AsyncIterator<MovieEdge>>, Fragmentable {
  node: <T = MovieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMovie {
  count: Int;
}

export interface AggregateMoviePromise extends Promise<AggregateMovie>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovieSubscription
  extends Promise<AsyncIterator<AggregateMovie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise extends Promise<UserConnection>, Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription extends Promise<AsyncIterator<UserEdge>>, Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise extends Promise<AggregateUser>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise extends Promise<BatchPayload>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ConfigurationSubscriptionPayload {
  mutation: MutationType;
  node: Configuration;
  updatedFields: String[];
  previousValues: ConfigurationPreviousValues;
}

export interface ConfigurationSubscriptionPayloadPromise
  extends Promise<ConfigurationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConfigurationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConfigurationPreviousValuesPromise>() => T;
}

export interface ConfigurationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConfigurationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConfigurationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConfigurationPreviousValuesSubscription>() => T;
}

export interface ConfigurationPreviousValues {
  id: ID_Output;
  radarrApiKey?: String;
  radarrEndpoint?: String;
  radarrRootFolder?: String;
  pushoverEndpoint?: String;
  pushoverApiKey?: String;
  pushoverUserKey?: String;
}

export interface ConfigurationPreviousValuesPromise
  extends Promise<ConfigurationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  radarrApiKey: () => Promise<String>;
  radarrEndpoint: () => Promise<String>;
  radarrRootFolder: () => Promise<String>;
  pushoverEndpoint: () => Promise<String>;
  pushoverApiKey: () => Promise<String>;
  pushoverUserKey: () => Promise<String>;
}

export interface ConfigurationPreviousValuesSubscription
  extends Promise<AsyncIterator<ConfigurationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  radarrApiKey: () => Promise<AsyncIterator<String>>;
  radarrEndpoint: () => Promise<AsyncIterator<String>>;
  radarrRootFolder: () => Promise<AsyncIterator<String>>;
  pushoverEndpoint: () => Promise<AsyncIterator<String>>;
  pushoverApiKey: () => Promise<AsyncIterator<String>>;
  pushoverUserKey: () => Promise<AsyncIterator<String>>;
}

export interface MovieSubscriptionPayload {
  mutation: MutationType;
  node: Movie;
  updatedFields: String[];
  previousValues: MoviePreviousValues;
}

export interface MovieSubscriptionPayloadPromise
  extends Promise<MovieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MoviePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoviePreviousValuesPromise>() => T;
}

export interface MovieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoviePreviousValuesSubscription>() => T;
}

export interface MoviePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
  requestedById?: String;
  img?: String;
  tmdbId: Int;
  genres: Int[];
  release_date?: String;
  vote_average?: Float;
  overview?: String;
  downloaded?: Boolean;
}

export interface MoviePreviousValuesPromise extends Promise<MoviePreviousValues>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  requestedById: () => Promise<String>;
  img: () => Promise<String>;
  tmdbId: () => Promise<Int>;
  genres: () => Promise<Int[]>;
  release_date: () => Promise<String>;
  vote_average: () => Promise<Float>;
  overview: () => Promise<String>;
  downloaded: () => Promise<Boolean>;
}

export interface MoviePreviousValuesSubscription
  extends Promise<AsyncIterator<MoviePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  requestedById: () => Promise<AsyncIterator<String>>;
  img: () => Promise<AsyncIterator<String>>;
  tmdbId: () => Promise<AsyncIterator<Int>>;
  genres: () => Promise<AsyncIterator<Int[]>>;
  release_date: () => Promise<AsyncIterator<String>>;
  vote_average: () => Promise<AsyncIterator<Float>>;
  overview: () => Promise<AsyncIterator<String>>;
  downloaded: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name?: String;
  email: String;
  notification?: Boolean;
  subscription?: String;
  role?: Role;
}

export interface UserPreviousValuesPromise extends Promise<UserPreviousValues>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  notification: () => Promise<Boolean>;
  subscription: () => Promise<String>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  notification: () => Promise<AsyncIterator<Boolean>>;
  subscription: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Movie",
    embedded: false,
  },
  {
    name: "Configuration",
    embedded: false,
  },
  {
    name: "User",
    embedded: false,
  },
  {
    name: "Role",
    embedded: false,
  },
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://prisma:4466`,
});
export const prisma = new Prisma();
