module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMovie {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Movie {
  id: ID!
  createdAt: DateTime!
  title: String!
  requestedBy: User
  img: String
  tmdb_id: String!
  genres: [String!]!
  release_date: String
  vote_average: String
  overview: String
  downloaded: Boolean
}

type MovieConnection {
  pageInfo: PageInfo!
  edges: [MovieEdge]!
  aggregate: AggregateMovie!
}

input MovieCreategenresInput {
  set: [String!]
}

input MovieCreateInput {
  id: ID
  title: String!
  requestedBy: UserCreateOneWithoutMoviesInput
  img: String
  tmdb_id: String!
  genres: MovieCreategenresInput
  release_date: String
  vote_average: String
  overview: String
  downloaded: Boolean
}

input MovieCreateManyWithoutRequestedByInput {
  create: [MovieCreateWithoutRequestedByInput!]
  connect: [MovieWhereUniqueInput!]
}

input MovieCreateWithoutRequestedByInput {
  id: ID
  title: String!
  img: String
  tmdb_id: String!
  genres: MovieCreategenresInput
  release_date: String
  vote_average: String
  overview: String
  downloaded: Boolean
}

type MovieEdge {
  node: Movie!
  cursor: String!
}

enum MovieOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  img_ASC
  img_DESC
  tmdb_id_ASC
  tmdb_id_DESC
  release_date_ASC
  release_date_DESC
  vote_average_ASC
  vote_average_DESC
  overview_ASC
  overview_DESC
  downloaded_ASC
  downloaded_DESC
}

type MoviePreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  img: String
  tmdb_id: String!
  genres: [String!]!
  release_date: String
  vote_average: String
  overview: String
  downloaded: Boolean
}

input MovieScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  img: String
  img_not: String
  img_in: [String!]
  img_not_in: [String!]
  img_lt: String
  img_lte: String
  img_gt: String
  img_gte: String
  img_contains: String
  img_not_contains: String
  img_starts_with: String
  img_not_starts_with: String
  img_ends_with: String
  img_not_ends_with: String
  tmdb_id: String
  tmdb_id_not: String
  tmdb_id_in: [String!]
  tmdb_id_not_in: [String!]
  tmdb_id_lt: String
  tmdb_id_lte: String
  tmdb_id_gt: String
  tmdb_id_gte: String
  tmdb_id_contains: String
  tmdb_id_not_contains: String
  tmdb_id_starts_with: String
  tmdb_id_not_starts_with: String
  tmdb_id_ends_with: String
  tmdb_id_not_ends_with: String
  release_date: String
  release_date_not: String
  release_date_in: [String!]
  release_date_not_in: [String!]
  release_date_lt: String
  release_date_lte: String
  release_date_gt: String
  release_date_gte: String
  release_date_contains: String
  release_date_not_contains: String
  release_date_starts_with: String
  release_date_not_starts_with: String
  release_date_ends_with: String
  release_date_not_ends_with: String
  vote_average: String
  vote_average_not: String
  vote_average_in: [String!]
  vote_average_not_in: [String!]
  vote_average_lt: String
  vote_average_lte: String
  vote_average_gt: String
  vote_average_gte: String
  vote_average_contains: String
  vote_average_not_contains: String
  vote_average_starts_with: String
  vote_average_not_starts_with: String
  vote_average_ends_with: String
  vote_average_not_ends_with: String
  overview: String
  overview_not: String
  overview_in: [String!]
  overview_not_in: [String!]
  overview_lt: String
  overview_lte: String
  overview_gt: String
  overview_gte: String
  overview_contains: String
  overview_not_contains: String
  overview_starts_with: String
  overview_not_starts_with: String
  overview_ends_with: String
  overview_not_ends_with: String
  downloaded: Boolean
  downloaded_not: Boolean
  AND: [MovieScalarWhereInput!]
  OR: [MovieScalarWhereInput!]
  NOT: [MovieScalarWhereInput!]
}

type MovieSubscriptionPayload {
  mutation: MutationType!
  node: Movie
  updatedFields: [String!]
  previousValues: MoviePreviousValues
}

input MovieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MovieWhereInput
  AND: [MovieSubscriptionWhereInput!]
  OR: [MovieSubscriptionWhereInput!]
  NOT: [MovieSubscriptionWhereInput!]
}

input MovieUpdategenresInput {
  set: [String!]
}

input MovieUpdateInput {
  title: String
  requestedBy: UserUpdateOneWithoutMoviesInput
  img: String
  tmdb_id: String
  genres: MovieUpdategenresInput
  release_date: String
  vote_average: String
  overview: String
  downloaded: Boolean
}

input MovieUpdateManyDataInput {
  title: String
  img: String
  tmdb_id: String
  genres: MovieUpdategenresInput
  release_date: String
  vote_average: String
  overview: String
  downloaded: Boolean
}

input MovieUpdateManyMutationInput {
  title: String
  img: String
  tmdb_id: String
  genres: MovieUpdategenresInput
  release_date: String
  vote_average: String
  overview: String
  downloaded: Boolean
}

input MovieUpdateManyWithoutRequestedByInput {
  create: [MovieCreateWithoutRequestedByInput!]
  delete: [MovieWhereUniqueInput!]
  connect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  disconnect: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutRequestedByInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutRequestedByInput!]
  deleteMany: [MovieScalarWhereInput!]
  updateMany: [MovieUpdateManyWithWhereNestedInput!]
}

input MovieUpdateManyWithWhereNestedInput {
  where: MovieScalarWhereInput!
  data: MovieUpdateManyDataInput!
}

input MovieUpdateWithoutRequestedByDataInput {
  title: String
  img: String
  tmdb_id: String
  genres: MovieUpdategenresInput
  release_date: String
  vote_average: String
  overview: String
  downloaded: Boolean
}

input MovieUpdateWithWhereUniqueWithoutRequestedByInput {
  where: MovieWhereUniqueInput!
  data: MovieUpdateWithoutRequestedByDataInput!
}

input MovieUpsertWithWhereUniqueWithoutRequestedByInput {
  where: MovieWhereUniqueInput!
  update: MovieUpdateWithoutRequestedByDataInput!
  create: MovieCreateWithoutRequestedByInput!
}

input MovieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  requestedBy: UserWhereInput
  img: String
  img_not: String
  img_in: [String!]
  img_not_in: [String!]
  img_lt: String
  img_lte: String
  img_gt: String
  img_gte: String
  img_contains: String
  img_not_contains: String
  img_starts_with: String
  img_not_starts_with: String
  img_ends_with: String
  img_not_ends_with: String
  tmdb_id: String
  tmdb_id_not: String
  tmdb_id_in: [String!]
  tmdb_id_not_in: [String!]
  tmdb_id_lt: String
  tmdb_id_lte: String
  tmdb_id_gt: String
  tmdb_id_gte: String
  tmdb_id_contains: String
  tmdb_id_not_contains: String
  tmdb_id_starts_with: String
  tmdb_id_not_starts_with: String
  tmdb_id_ends_with: String
  tmdb_id_not_ends_with: String
  release_date: String
  release_date_not: String
  release_date_in: [String!]
  release_date_not_in: [String!]
  release_date_lt: String
  release_date_lte: String
  release_date_gt: String
  release_date_gte: String
  release_date_contains: String
  release_date_not_contains: String
  release_date_starts_with: String
  release_date_not_starts_with: String
  release_date_ends_with: String
  release_date_not_ends_with: String
  vote_average: String
  vote_average_not: String
  vote_average_in: [String!]
  vote_average_not_in: [String!]
  vote_average_lt: String
  vote_average_lte: String
  vote_average_gt: String
  vote_average_gte: String
  vote_average_contains: String
  vote_average_not_contains: String
  vote_average_starts_with: String
  vote_average_not_starts_with: String
  vote_average_ends_with: String
  vote_average_not_ends_with: String
  overview: String
  overview_not: String
  overview_in: [String!]
  overview_not_in: [String!]
  overview_lt: String
  overview_lte: String
  overview_gt: String
  overview_gte: String
  overview_contains: String
  overview_not_contains: String
  overview_starts_with: String
  overview_not_starts_with: String
  overview_ends_with: String
  overview_not_ends_with: String
  downloaded: Boolean
  downloaded_not: Boolean
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
}

input MovieWhereUniqueInput {
  id: ID
  tmdb_id: String
}

type Mutation {
  createMovie(data: MovieCreateInput!): Movie!
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateManyMovies(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): BatchPayload!
  upsertMovie(where: MovieWhereUniqueInput!, create: MovieCreateInput!, update: MovieUpdateInput!): Movie!
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteManyMovies(where: MovieWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  movie(where: MovieWhereUniqueInput!): Movie
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie]!
  moviesConnection(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  CUSTOMER
}

type Subscription {
  movie(where: MovieSubscriptionWhereInput): MovieSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String
  email: String!
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie!]
  role: Role
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String!
  movies: MovieCreateManyWithoutRequestedByInput
  role: Role
}

input UserCreateOneWithoutMoviesInput {
  create: UserCreateWithoutMoviesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMoviesInput {
  id: ID
  name: String
  email: String!
  role: Role
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String!
  role: Role
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  movies: MovieUpdateManyWithoutRequestedByInput
  role: Role
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  role: Role
}

input UserUpdateOneWithoutMoviesInput {
  create: UserCreateWithoutMoviesInput
  update: UserUpdateWithoutMoviesDataInput
  upsert: UserUpsertWithoutMoviesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMoviesDataInput {
  name: String
  email: String
  role: Role
}

input UserUpsertWithoutMoviesInput {
  update: UserUpdateWithoutMoviesDataInput!
  create: UserCreateWithoutMoviesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  movies_every: MovieWhereInput
  movies_some: MovieWhereInput
  movies_none: MovieWhereInput
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    