type Query {
  users: [User]
  user(email: String!): User
  movies(orderBy: MovieOrderByInput, first: Int): [Movie!]
  movie(id: ID): Movie
}

type Movie {
  id: ID!
  title: String!
  requestedBy: User!
  requestedById: String
  img: String
  tmdb_id: String
  genres: [String]
  release_date: String
  createdAt: String!
  vote_average: String
  overview: String
  downloaded: Boolean
}

type Configuration {
  id: ID!
  radarrApiKey: String!
  radarrEndpoint: String!
  radarrRootFolder: String!
  pushoverApiKey: String
  pushoverUserKey: String
  user: User
}
type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String
  email: String!
  movies: [Movie!]!
  notification: Boolean
  subscription: String
  role: Role
  configuration: Configuration
}

enum Role {
  ADMIN
  CUSTOMER
}

type Mutation {
  createConfiguration(
    radarrApiKey: String!
    radarrEndpoint: String!
    radarrRootFolder: String!
    pushoverApiKey: String
    pushoverUserKey: String
  ): Configuration

  updateConfiguration(
    radarrApiKey: String
    radarrEndpoint: String
    radarrRootFolder: String
    pushoverApiKey: String
    pushoverUserKey: String
  ): Configuration
  createToken(email: String!): AuthPayload

  getToken(email: String!): AuthPayload

  updateUser(
    email: String!
    subscription: String
    name: String
    notification: Boolean
    role: Role
  ): User

  createMovie(
    title: String!
    img: String
    tmdb_id: String!
    genres: [String]
    vote_average: String
    release_date: String
    overview: String
  ): Movie

  updateMovie(tmdb_id: String!, downloaded: Boolean): Movie

  deleteMovie(id: ID!): Movie
}

enum MovieOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type Subscription {
  newMovie: Movie
}
