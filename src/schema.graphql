type Query {
  users: [User]
  user(email: String!): User
  movies(orderBy: MovieOrderByInput, first: Int): [Movie!]
  movie(id: ID): Movie
}
type Movie {
  id: ID!
  title: String!
  requestedBy: User!
  requestedById: String
  img: String
  tmdb_id: String
  genres: [String]
  release_date: String
  createdAt: String!
  vote_average: String
  overview: String
  downloaded: Boolean
}

type Mutation {
  createToken(email: String!): AuthPayload
  getToken(email: String!): AuthPayload
  updateUser(
    email: String!
    subscription: String
    name: String
    notification: Boolean
    role: Role
  ): User
  createMovie(
    title: String!
    img: String
    tmdb_id: String!
    genres: [String]
    vote_average: String
    release_date: String
    overview: String
  ): Movie
  updateMovie(tmdb_id: String!, downloaded: Boolean): Movie
  deleteMovie(id: ID!): Movie
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String
  email: String!
  movies: [Movie!]!
  notification: Boolean
  subscription: String
  role: Role
}

enum Role {
  ADMIN
  CUSTOMER
}

enum MovieOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type Subscription {
  newMovie: Movie
}
